===
infix_op.txt
===
import log : fn (i32) -> unit from log

struct S { x : i32 }

fn main() {
  log(1 + 1);
  log(1 + 1 + 1);
  log(1 * 1 + 1);
  log(1 + 1 * 1);
  if 1 <= 2 && 1 < 1 || 1 >= 3 && 3 > 4 || 1 == 1 || 1 != 2 {
    log(1);
  } else {
    log(2);
  };

  log(1 + S { x = 10 }.x);

  if f32_abs(2.5) > f32_abs(f32_neg(2.6)) {
    log(1);
  } else {
    log(2);
  };
}


---

(source_file
  (top_import
    (lower_ident)
    (ty_func
      (ty_i32)
      (ty_unit))
    (lower_ident))
  (top_struct
    (upper_ident)
    (struct_field_top
      (lower_ident)
      (ty_i32)))
  (top_func
    (lower_ident)
    (func_params)
    (block_e
      (expr_decl
        (call_e
          (var_e
            (lower_ident))
          (call_args
            (binary_e
              (int_lit)
              (int_lit)))))
      (expr_decl
        (call_e
          (var_e
            (lower_ident))
          (call_args
            (binary_e
              (binary_e
                (int_lit)
                (int_lit))
              (int_lit)))))
      (expr_decl
        (call_e
          (var_e
            (lower_ident))
          (call_args
            (binary_e
              (binary_e
                (int_lit)
                (int_lit))
              (int_lit)))))
      (expr_decl
        (call_e
          (var_e
            (lower_ident))
          (call_args
            (binary_e
              (int_lit)
              (binary_e
                (int_lit)
                (int_lit))))))
      (expr_decl
        (if_e
          (binary_e
            (binary_e
              (binary_e
                (int_lit)
                (int_lit))
              (binary_e
                (binary_e
                  (int_lit)
                  (int_lit))
                (binary_e
                  (int_lit)
                  (int_lit))))
            (binary_e
              (binary_e
                (binary_e
                  (int_lit)
                  (int_lit))
                (binary_e
                  (int_lit)
                  (int_lit)))
              (binary_e
                (int_lit)
                (int_lit))))
          (block_e
            (expr_decl
              (call_e
                (var_e
                  (lower_ident))
                (call_args
                  (int_lit)))))
          (block_e
            (expr_decl
              (call_e
                (var_e
                  (lower_ident))
                (call_args
                  (int_lit)))))))
      (expr_decl
        (call_e
          (var_e
            (lower_ident))
          (call_args
            (binary_e
              (int_lit)
              (struct_idx_e
                (struct_e
                  (upper_ident)
                  (struct_field_e
                    (lower_ident)
                    (int_lit)))
                (lower_ident))))))
      (expr_decl
        (if_e
          (binary_e
            (call_e
              (var_e
                (lower_ident))
              (call_args
                (float_lit)))
            (call_e
              (var_e
                (lower_ident))
              (call_args
                (call_e
                  (var_e
                    (lower_ident))
                  (call_args
                    (float_lit))))))
          (block_e
            (expr_decl
              (call_e
                (var_e
                  (lower_ident))
                (call_args
                  (int_lit)))))
          (block_e
            (expr_decl
              (call_e
                (var_e
                  (lower_ident))
                (call_args
                  (int_lit))))))))))
